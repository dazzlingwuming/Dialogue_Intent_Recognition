"""
对话意图识别项目
"""

1.找到数据集，并且找到所有的意图类别
    -a. 提取具体有那些意图类别
        -域的数量：29，意图的数量：24
            域的种类：['app', 'bus', 'cinemas', 'contacts', 'cookbook', 'email', 'epg', 'flight', 'health', 'joke', 'lottery', 'map', 'match', 'message', 'music', 'news', 'novel', 'poetry', 'radio', 'riddle', 'stock', 'story', 'telephone', 'train', 'translation', 'tvchannel', 'video', 'weather', 'website']
            意图的种类：[nan, 'REPLAY_ALL', 'DOWNLOAD', 'TRANSLATION', 'PLAY', 'RISERATE_QUERY', 'ROUTE', 'LAUNCH', 'POSITION', 'SENDCONTACTS', 'NUMBER_QUERY', 'SEARCH', 'VIEW', 'DATE_QUERY', 'REPLY', 'CLOSEPRICE_QUERY', 'DEFAULT', 'OPEN', 'CREATE', 'SEND', 'LOOK_BACK', 'DIAL', 'FORWARD', 'QUERY']

    -b. 借鉴TORCHTEXT的做法，简化一下数据加载相关代码：
        -b1. 安装TORCHTEXT
        -b2. 学习TORCHTEXT的使用方法
    -c token处理，词典处理
        -c1. 词典的构建
            -c1a. 词典的构建：特殊词处理（unk，pad，bos，eos）
            1. unk：未知词，词典中没有的词
            2. pad：填充符，句子长度不够时，用pad填充
            3. bos：句子开始符
            4. eos：句子结束符
            -c1b. 词典的保存与加载
        -c2. token的处理：词，字，笔画特征选择
            -c2a. 分词
            -c2b. 转索引
            -c2c. padding
     -d 构建dataset
        -d1. 构建Dataset类

        -d2. 构建DataLoader类
    2.模型构建
        -a.模型选择
            -a1. RNN
            -a2. LSTM
            -a3. GRU
            +fc 全连接
        -b 模型调整
            -b1. 双向
            -b2. 多层
            -b3.采用packed sequence
            -b4. 为了方便调试每一层的内容，在common里面写好每一层的类，然后在model里面组装
    3.模型训练
        -a. 训练代码编写
            -a1. 训练函数
            -a2. 验证函数
            -a3. 测试函数
        -b. 训练技巧
            -b1. 学习率调整
            -b2. 提前停止
            -b3. 模型保存与加载
        -c.运行可视化
            -c1. tensorboard
            -c2. visdom
    4.模型评估
        -a. 评估指标
            -a1. 准确率
            -a2. 损失值
    5.训练方式
        -a.发现模型训练后准确率先升高后降低，且不收敛
            -a1.学习率过大，前期惩罚系数过重

        -b.当学习率过小时，模型训练后准确率缓慢上升，且收敛
            -b1.训练集上面的效果很好，验证集上面效果降低，过拟合
            增大惩罚系数，减小模型复杂度，增大数据集

        -c.所以可以设置多个阶段来完成
            前期可以设置较大学习率，快速提升模型效果
            后期可以设置较小学习率，微调模型效果
        -d.数据增强
            -d1.同义词替换
            -d2.随机插入
            -d3.随机交换
            -d4.随机删除
            -d5.mask掩盖
    6.模型部署
        -a. 整体角度理解：模型部署给调用房(前端，后端)，调用方调用模型，提供一个接口（http，rpc），调用方传入数据，模型返回结果
        -b. 模型部署方式：
            -b1.部署到深度学习品台/云服务（如：阿里云的PAI，腾讯云的TI-ONE，华为云的ModelArts，百度云的BML等）
                   阿里云API部署
                   制作好docker镜像，上传到阿里云容器服务，创建服务，暴露端口，调用服务：
                        1.阿里云账号
                           阿里云ECS服务器
                        2.安装docker(linxu)
            -b2. 基于Python语言提供一个HTTP服务
                -b2a. 裸服务器部署，直接将模型部署到服务器上，使用Flask/FastAPI等框架提供HTTP接口（本次使用这种方法）
                -b2b. 基于Docker容器化部署，使用Docker将模型和服务打包成一个容器，方便部署和管理
                      相比于上面的裸服务器部署，容器化部署更加灵活，易于扩展和维护
            -b3. 基于Java/C++/Go等语言提供一个HTTP服务
                -b3a. 同b2a，但需要转换成使用Java或C++语言，基于Spring Boot等框架提供HTTP接口
            -b4. 将模型转换为C++支持的结构，进行边端化处理
        -c. 本次使用b2a方式进行部署
            -c1. python的Web框架：使用Flask框架提供HTTP接口
            -c2. Flask框架的安装与使用：pip install Flask